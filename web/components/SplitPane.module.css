.SplitPane {
    display: flex;
    flex-direction: var(--axis);
    align-items: stretch;
    overflow: hidden;

    /* Always defined in JS, just here for reference */
    --min-size: 10%;
}

.SplitPane.AxisRow {
    --axis: row;
    --crossAxis: column;
    --cursor: col-resize;
}
.SplitPane.AxisColumn {
    --axis: column;
    --crossAxis: row;
    --cursor: row-resize;
}
@media (orientation: landscape) {
    .SplitPane.AxisLong {
        --axis: row;
        --crossAxis: column;
        --cursor: col-resize;
    }
    .SplitPane.AxisShort {
        --axis: column;
        --crossAxis: row;
        --cursor: row-resize;
    }
}
@media (orientation: portrait) {
    .SplitPane.AxisLong {
        --axis: column;
        --crossAxis: row;
        --cursor: row-resize;
    }
    .SplitPane.AxisShort {
        --axis: row;
        --crossAxis: column;
        --cursor: col-resize;
    }
}

.Pane {
    position: relative;
    display: flex;
    flex-direction: var(--axis);
    align-items: stretch;
    justify-content: stretch;

    min-height: var(--min-size);
    min-width: var(--min-size);
}

/* Style the user provided elements... */
.Pane > *:first-child {
    /* Make sure user element fills the pane... */
    flex: 1;
    /* and can shrink down to the expected amount. */
    min-height: var(--min-size);
    min-width: var(--min-size);
}

.DragHandle {
    z-index: 1;
    cursor: var(--cursor);
    transition: opacity 0.2s ease-in-out;
    opacity: 0;

    display: flex;
    flex-direction: var(--axis);
    align-items: stretch;
    justify-content: center;
    flex-basis: 20px;
    margin: -10px;
}
.DragHandle:hover {
    opacity: 1;
}

.DragHandleIndicator {
    flex-basis: 2px;
    background-color: var(--SplitPane-dragHandleColor);
}
